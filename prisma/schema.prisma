generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id         String  @id @default(cuid())
    github     String?
    linkedIn   String?
    twitter    String?
    facebook   String?
    website    String?
    about      String?
    location   String?
    coverImage String?
    user       User    @relation(fields: [userId], references: [id])
    userId     String  @unique
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in BigInt?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String
    username      String         @unique
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    createdAt     DateTime       @default(now())
    interest      Category[]
    notification  Notification[]
    followers     Follows[]      @relation("follower")
    followings    Follows[]      @relation("following")
    feed          Feed[]
    comment       Comment[]
    posts         Post[]
    postLikes     PostLike[]
    commentLikes  CommentLike[]
    groups        Group[]
    role          Role           @default(viewer)
    group         Group[]        @relation("moderator")
    bookmarks     Post[]         @relation("bookmark")
}

enum Role {
    moderator
    admin
    viewer
}

model Group {
    id              String   @id @default(cuid())
    name            String
    image           String   @default("/group-logo.webp")
    slug            String   @unique
    description     String
    members         User[]
    post            Post[]
    createdAt       DateTime @default(now())
    createdBy       User     @relation(name: "moderator", fields: [createdByUserId], references: [id])
    createdByUserId String
}

model Follows {
    id           String        @id @default(cuid())
    follower     User          @relation("follower", fields: [followerId], references: [id])
    followerId   String
    following    User          @relation("following", fields: [followingId], references: [id])
    followingId  String
    notification Notification?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          String     @id @default(cuid())
    slug        String
    title       String
    view_count  Int        @default(value: 0)
    createdAt   DateTime   @default(now())
    publishedAt DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    isPublished Boolean    @default(false)
    comments    Comment[]
    likes       PostLike[]
    author      User       @relation(fields: [authorId], references: [id])
    authorId    String
    content     String
    category    Category[]
    categoryId  String?
    feed        Feed[]
    status      PostStatus
    postType    PostType   @default(ARTICLE)
    isFeatured  Boolean    @default(false)
    group       Group?     @relation(fields: [groupId], references: [id])
    groupId     String?
    markedBy    User[]     @relation("bookmark")
}

enum PostStatus {
    DRAFT
    PUBLISHED
    UNPUBLISHED
}

enum PostType {
    ARTICLE
    LINK
}

model Category {
    id     String  @id @default(cuid())
    name   String  @unique
    posts  Post[]
    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Comment {
    id           String        @id @default(cuid())
    post         Post          @relation(fields: [postId], references: [id])
    postId       String
    createdAt    DateTime      @default(now())
    content      String
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    reply        Reply?        @relation(fields: [replyId], references: [id], onDelete: Cascade)
    replyId      String?       @unique
    parent       Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children     Comment[]     @relation("ParentChild")
    parentId     String?
    notification Notification?
    likes        CommentLike[]
}

model PostLike {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId       String
    notification Notification?
}

model CommentLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    userId    String
    commentId String
}

model Notification {
    createdAt        DateTime         @default(now())
    id               String           @id @default(cuid())
    isRead           Boolean          @default(false)
    user             User?            @relation(fields: [userId], references: [id])
    userId           String?
    comment          Comment?         @relation(fields: [commentId], references: [id])
    commentId        String?          @unique
    follows          Follows?         @relation(fields: [followsId], references: [id])
    followsId        String?          @unique
    postLike         PostLike?        @relation(fields: [postLikeId], references: [id])
    postLikeId       String?          @unique
    notificationType NotificationType
    message          Json
}

model Feed {
    createdAt DateTime @default(now())
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

enum NotificationType {
    COMMENT
    LIKE
    FOLLOWER
    UNFOLLOW
    SYSTEM
}

model Reply {
    id        String   @id @default(cuid())
    by        String
    to        String
    content   String
    comment   Comment?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
