generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id         String  @id @default(cuid())
    github     String?
    linkedIn   String?
    twitter    String?
    facebook   String?
    website    String?
    about      String?
    location   String?
    coverImage String?
    user       User    @relation(fields: [userId], references: [id])
    userId     String  @unique
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in BigInt?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    username      String?        @unique
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    createdAt     DateTime       @default(now())
    interest      Genre[]
    notification  Notification[]
    followers     Follows[]      @relation("follower")
    following     Follows[]      @relation("following")
    feed          Feed[]
    comment       Comment[]
    favorites     Track[]
    likes         Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Track {
    id          String    @id @default(cuid())
    name        String
    view_count  Int       @default(value: 0)
    createdAt   DateTime  @default(now())
    publishedAt DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    comments    Comment[]
    likes       Like[]
    user        User[]
    genre       Genre
    feed        Feed[]
    duration    Float
    src         String
    artist      String
    image       String
}

enum Genre {
    Rock
    Jazz
    Electronica
    Acoustic

}

model Comment {
    id           String        @id @default(cuid())
    track        Track         @relation(fields: [trackId], references: [id])
    trackId      String
    createdAt    DateTime      @default(now())
    content      String
    user         User          @relation(fields: [userId], references: [id])
    userId       String
    reply        Reply?        @relation(fields: [replyId], references: [id])
    replyId      String?       @unique
    notification Notification?
}

model Like {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    user         User          @relation(fields: [userId], references: [id])
    userId       String
    track        Track         @relation(fields: [trackId], references: [id])
    trackId      String
    notification Notification?
}

model Notification {
    createdAt        DateTime         @default(now())
    id               String           @id @default(cuid())
    isRead           Boolean          @default(false)
    user             User?            @relation(fields: [userId], references: [id])
    userId           String?
    comment          Comment?         @relation(fields: [commentId], references: [id])
    commentId        String?          @unique
    follows          Follows?         @relation(fields: [followsId], references: [id])
    followsId        String?          @unique
    likes            Like?            @relation(fields: [likesId], references: [id])
    likesId          String?          @unique
    notificationType NotificationType
    message          Json
}

model Feed {
    createdAt DateTime @default(now())
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    track     Track    @relation(fields: [trackId], references: [id])
    trackId   String
}

enum NotificationType {
    COMMENT
    LIKE
    FOLLOWER
    UNFOLLOW
    SYSTEM
}

model Reply {
    id        String   @id @default(cuid())
    by        String
    to        String
    content   String
    comment   Comment?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Follows {
    id           String        @id @default(cuid())
    follower     User          @relation("follower", fields: [followerId], references: [id])
    followerId   String
    following    User          @relation("following", fields: [followingId], references: [id])
    followingId  String
    notification Notification?
}
